import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { actionGenerateOtp } from '../actions/authActions';

const initialState: any = {
  Info: [],
  selectedDrawer: null,
  isDrawerActive: false,
};

export const appSlice = createSlice({
  name: 'app',
  initialState,
  reducers: {
    save: (state, action: PayloadAction<any>) => {
      state.data = action.payload;
    },
    saveDeviceInfo: (state, action: PayloadAction<Object>) => {
      state.deviceInfo = action.payload;
    },
    saveSelectedDrawer: (state, action: PayloadAction<string | null>) => {
      state.selectedDrawer = action.payload;
    },
    handleChangeDrawer: (state, action: PayloadAction<boolean>) => {
      state.isDrawerActive = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(actionGenerateOtp.pending, (state) => {
        state.otpPending = true;
      })
      .addCase(
        actionGenerateOtp.fulfilled,
        (state, { payload }: PayloadAction<any>) => {
          // When the API call is successful and we get some data,the data becomes the `fulfilled` action payload
          state.otpPending = false;
          state.otpData = payload;
        },
      )
      .addCase(
        actionGenerateOtp.rejected,
        (state, { payload: { message } }: PayloadAction<any>) => {
          state.otpPending = false;
          state.error = true;
          state.message = message;
        },
      );
  },
});

export const { save, saveDeviceInfo, saveSelectedDrawer, handleChangeDrawer } =
  appSlice.actions;

export default appSlice.reducer;
